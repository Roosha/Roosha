// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: roosha_service.proto
// Original file comments:
//
//  Copyright (c) 2016 Leo Khotov
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public License
//  version 3 along with this work.  If not, see <http://www.gnu.org/licenses/>.
//
#ifndef GRPC_roosha_5fservice_2eproto__INCLUDED
#define GRPC_roosha_5fservice_2eproto__INCLUDED

#include "roosha_service.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace roosha {

class RooshaService GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status registrate(::grpc::ClientContext* context, const ::roosha::Credentials& request, ::roosha::AuthenticationToken* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roosha::AuthenticationToken>> Asyncregistrate(::grpc::ClientContext* context, const ::roosha::Credentials& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roosha::AuthenticationToken>>(AsyncregistrateRaw(context, request, cq));
    }
    virtual ::grpc::Status authorize(::grpc::ClientContext* context, const ::roosha::Credentials& request, ::roosha::AuthenticationToken* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roosha::AuthenticationToken>> Asyncauthorize(::grpc::ClientContext* context, const ::roosha::Credentials& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roosha::AuthenticationToken>>(AsyncauthorizeRaw(context, request, cq));
    }
    // methods declared below should pass authorization token in 'roosha-auth-token' metadata key.
    virtual ::grpc::Status translate(::grpc::ClientContext* context, const ::roosha::TranslationRequest& request, ::roosha::Translations* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roosha::Translations>> Asynctranslate(::grpc::ClientContext* context, const ::roosha::TranslationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roosha::Translations>>(AsynctranslateRaw(context, request, cq));
    }
    virtual ::grpc::Status proposeUserTranslations(::grpc::ClientContext* context, const ::roosha::Translations& request, ::roosha::Void* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roosha::Void>> AsyncproposeUserTranslations(::grpc::ClientContext* context, const ::roosha::Translations& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roosha::Void>>(AsyncproposeUserTranslationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::roosha::Change>> saveChanges(::grpc::ClientContext* context, ::roosha::Void* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::roosha::Change>>(saveChangesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::roosha::Change>> AsyncsaveChanges(::grpc::ClientContext* context, ::roosha::Void* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::roosha::Change>>(AsyncsaveChangesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::roosha::Change>> loadChanges(::grpc::ClientContext* context, const ::roosha::Void& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::roosha::Change>>(loadChangesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::roosha::Change>> AsyncloadChanges(::grpc::ClientContext* context, const ::roosha::Void& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::roosha::Change>>(AsyncloadChangesRaw(context, request, cq, tag));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::roosha::AuthenticationToken>* AsyncregistrateRaw(::grpc::ClientContext* context, const ::roosha::Credentials& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::roosha::AuthenticationToken>* AsyncauthorizeRaw(::grpc::ClientContext* context, const ::roosha::Credentials& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::roosha::Translations>* AsynctranslateRaw(::grpc::ClientContext* context, const ::roosha::TranslationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::roosha::Void>* AsyncproposeUserTranslationsRaw(::grpc::ClientContext* context, const ::roosha::Translations& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::roosha::Change>* saveChangesRaw(::grpc::ClientContext* context, ::roosha::Void* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::roosha::Change>* AsyncsaveChangesRaw(::grpc::ClientContext* context, ::roosha::Void* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::roosha::Change>* loadChangesRaw(::grpc::ClientContext* context, const ::roosha::Void& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::roosha::Change>* AsyncloadChangesRaw(::grpc::ClientContext* context, const ::roosha::Void& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status registrate(::grpc::ClientContext* context, const ::roosha::Credentials& request, ::roosha::AuthenticationToken* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roosha::AuthenticationToken>> Asyncregistrate(::grpc::ClientContext* context, const ::roosha::Credentials& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roosha::AuthenticationToken>>(AsyncregistrateRaw(context, request, cq));
    }
    ::grpc::Status authorize(::grpc::ClientContext* context, const ::roosha::Credentials& request, ::roosha::AuthenticationToken* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roosha::AuthenticationToken>> Asyncauthorize(::grpc::ClientContext* context, const ::roosha::Credentials& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roosha::AuthenticationToken>>(AsyncauthorizeRaw(context, request, cq));
    }
    ::grpc::Status translate(::grpc::ClientContext* context, const ::roosha::TranslationRequest& request, ::roosha::Translations* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roosha::Translations>> Asynctranslate(::grpc::ClientContext* context, const ::roosha::TranslationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roosha::Translations>>(AsynctranslateRaw(context, request, cq));
    }
    ::grpc::Status proposeUserTranslations(::grpc::ClientContext* context, const ::roosha::Translations& request, ::roosha::Void* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roosha::Void>> AsyncproposeUserTranslations(::grpc::ClientContext* context, const ::roosha::Translations& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roosha::Void>>(AsyncproposeUserTranslationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::roosha::Change>> saveChanges(::grpc::ClientContext* context, ::roosha::Void* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::roosha::Change>>(saveChangesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::roosha::Change>> AsyncsaveChanges(::grpc::ClientContext* context, ::roosha::Void* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::roosha::Change>>(AsyncsaveChangesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::roosha::Change>> loadChanges(::grpc::ClientContext* context, const ::roosha::Void& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::roosha::Change>>(loadChangesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::roosha::Change>> AsyncloadChanges(::grpc::ClientContext* context, const ::roosha::Void& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::roosha::Change>>(AsyncloadChangesRaw(context, request, cq, tag));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::roosha::AuthenticationToken>* AsyncregistrateRaw(::grpc::ClientContext* context, const ::roosha::Credentials& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::roosha::AuthenticationToken>* AsyncauthorizeRaw(::grpc::ClientContext* context, const ::roosha::Credentials& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::roosha::Translations>* AsynctranslateRaw(::grpc::ClientContext* context, const ::roosha::TranslationRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::roosha::Void>* AsyncproposeUserTranslationsRaw(::grpc::ClientContext* context, const ::roosha::Translations& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientWriter< ::roosha::Change>* saveChangesRaw(::grpc::ClientContext* context, ::roosha::Void* response) GRPC_OVERRIDE;
    ::grpc::ClientAsyncWriter< ::roosha::Change>* AsyncsaveChangesRaw(::grpc::ClientContext* context, ::roosha::Void* response, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::roosha::Change>* loadChangesRaw(::grpc::ClientContext* context, const ::roosha::Void& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::roosha::Change>* AsyncloadChangesRaw(::grpc::ClientContext* context, const ::roosha::Void& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_registrate_;
    const ::grpc::RpcMethod rpcmethod_authorize_;
    const ::grpc::RpcMethod rpcmethod_translate_;
    const ::grpc::RpcMethod rpcmethod_proposeUserTranslations_;
    const ::grpc::RpcMethod rpcmethod_saveChanges_;
    const ::grpc::RpcMethod rpcmethod_loadChanges_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status registrate(::grpc::ServerContext* context, const ::roosha::Credentials* request, ::roosha::AuthenticationToken* response);
    virtual ::grpc::Status authorize(::grpc::ServerContext* context, const ::roosha::Credentials* request, ::roosha::AuthenticationToken* response);
    // methods declared below should pass authorization token in 'roosha-auth-token' metadata key.
    virtual ::grpc::Status translate(::grpc::ServerContext* context, const ::roosha::TranslationRequest* request, ::roosha::Translations* response);
    virtual ::grpc::Status proposeUserTranslations(::grpc::ServerContext* context, const ::roosha::Translations* request, ::roosha::Void* response);
    virtual ::grpc::Status saveChanges(::grpc::ServerContext* context, ::grpc::ServerReader< ::roosha::Change>* reader, ::roosha::Void* response);
    virtual ::grpc::Status loadChanges(::grpc::ServerContext* context, const ::roosha::Void* request, ::grpc::ServerWriter< ::roosha::Change>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_registrate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_registrate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_registrate() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registrate(::grpc::ServerContext* context, const ::roosha::Credentials* request, ::roosha::AuthenticationToken* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregistrate(::grpc::ServerContext* context, ::roosha::Credentials* request, ::grpc::ServerAsyncResponseWriter< ::roosha::AuthenticationToken>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_authorize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_authorize() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_authorize() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status authorize(::grpc::ServerContext* context, const ::roosha::Credentials* request, ::roosha::AuthenticationToken* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestauthorize(::grpc::ServerContext* context, ::roosha::Credentials* request, ::grpc::ServerAsyncResponseWriter< ::roosha::AuthenticationToken>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_translate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_translate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_translate() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status translate(::grpc::ServerContext* context, const ::roosha::TranslationRequest* request, ::roosha::Translations* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttranslate(::grpc::ServerContext* context, ::roosha::TranslationRequest* request, ::grpc::ServerAsyncResponseWriter< ::roosha::Translations>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_proposeUserTranslations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_proposeUserTranslations() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_proposeUserTranslations() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status proposeUserTranslations(::grpc::ServerContext* context, const ::roosha::Translations* request, ::roosha::Void* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestproposeUserTranslations(::grpc::ServerContext* context, ::roosha::Translations* request, ::grpc::ServerAsyncResponseWriter< ::roosha::Void>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_saveChanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_saveChanges() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_saveChanges() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveChanges(::grpc::ServerContext* context, ::grpc::ServerReader< ::roosha::Change>* reader, ::roosha::Void* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsaveChanges(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::roosha::Void, ::roosha::Change>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(4, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_loadChanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_loadChanges() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_loadChanges() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadChanges(::grpc::ServerContext* context, const ::roosha::Void* request, ::grpc::ServerWriter< ::roosha::Change>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadChanges(::grpc::ServerContext* context, ::roosha::Void* request, ::grpc::ServerAsyncWriter< ::roosha::Change>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_registrate<WithAsyncMethod_authorize<WithAsyncMethod_translate<WithAsyncMethod_proposeUserTranslations<WithAsyncMethod_saveChanges<WithAsyncMethod_loadChanges<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_registrate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_registrate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_registrate() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registrate(::grpc::ServerContext* context, const ::roosha::Credentials* request, ::roosha::AuthenticationToken* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_authorize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_authorize() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_authorize() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status authorize(::grpc::ServerContext* context, const ::roosha::Credentials* request, ::roosha::AuthenticationToken* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_translate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_translate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_translate() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status translate(::grpc::ServerContext* context, const ::roosha::TranslationRequest* request, ::roosha::Translations* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_proposeUserTranslations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_proposeUserTranslations() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_proposeUserTranslations() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status proposeUserTranslations(::grpc::ServerContext* context, const ::roosha::Translations* request, ::roosha::Void* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_saveChanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_saveChanges() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_saveChanges() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveChanges(::grpc::ServerContext* context, ::grpc::ServerReader< ::roosha::Change>* reader, ::roosha::Void* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_loadChanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_loadChanges() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_loadChanges() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadChanges(::grpc::ServerContext* context, const ::roosha::Void* request, ::grpc::ServerWriter< ::roosha::Change>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace roosha


#endif  // GRPC_roosha_5fservice_2eproto__INCLUDED
