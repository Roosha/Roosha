// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: learning.proto

#ifndef PROTOBUF_learning_2eproto__INCLUDED
#define PROTOBUF_learning_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace roosha {
class Scrutiny;
class ScrutinyDefaultTypeInternal;
extern ScrutinyDefaultTypeInternal _Scrutiny_default_instance_;
}  // namespace roosha

namespace roosha {

namespace protobuf_learning_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_learning_2eproto

enum ScrutinyView {
  UNKNOWN_SCRUTINY_VIEW = 0,
  TARGETS_AND_EXAMPLE = 1,
  ScrutinyView_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ScrutinyView_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ScrutinyView_IsValid(int value);
const ScrutinyView ScrutinyView_MIN = UNKNOWN_SCRUTINY_VIEW;
const ScrutinyView ScrutinyView_MAX = TARGETS_AND_EXAMPLE;
const int ScrutinyView_ARRAYSIZE = ScrutinyView_MAX + 1;

const ::google::protobuf::EnumDescriptor* ScrutinyView_descriptor();
inline const ::std::string& ScrutinyView_Name(ScrutinyView value) {
  return ::google::protobuf::internal::NameOfEnum(
    ScrutinyView_descriptor(), value);
}
inline bool ScrutinyView_Parse(
    const ::std::string& name, ScrutinyView* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ScrutinyView>(
    ScrutinyView_descriptor(), name, value);
}
enum ScrutinyInput {
  UNKNOWN_SCRUTINY_INPUT = 0,
  TEXT_INPUT = 1,
  ScrutinyInput_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ScrutinyInput_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ScrutinyInput_IsValid(int value);
const ScrutinyInput ScrutinyInput_MIN = UNKNOWN_SCRUTINY_INPUT;
const ScrutinyInput ScrutinyInput_MAX = TEXT_INPUT;
const int ScrutinyInput_ARRAYSIZE = ScrutinyInput_MAX + 1;

const ::google::protobuf::EnumDescriptor* ScrutinyInput_descriptor();
inline const ::std::string& ScrutinyInput_Name(ScrutinyInput value) {
  return ::google::protobuf::internal::NameOfEnum(
    ScrutinyInput_descriptor(), value);
}
inline bool ScrutinyInput_Parse(
    const ::std::string& name, ScrutinyInput* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ScrutinyInput>(
    ScrutinyInput_descriptor(), name, value);
}
enum ScrutinyStatus {
  UNKNOWN_SCTUTINY_STATUS = 0,
  SKIPPED = 1,
  FAILED = 2,
  EASY = 3,
  NORMAL = 4,
  DIFFICULT = 5,
  ScrutinyStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ScrutinyStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ScrutinyStatus_IsValid(int value);
const ScrutinyStatus ScrutinyStatus_MIN = UNKNOWN_SCTUTINY_STATUS;
const ScrutinyStatus ScrutinyStatus_MAX = DIFFICULT;
const int ScrutinyStatus_ARRAYSIZE = ScrutinyStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ScrutinyStatus_descriptor();
inline const ::std::string& ScrutinyStatus_Name(ScrutinyStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ScrutinyStatus_descriptor(), value);
}
inline bool ScrutinyStatus_Parse(
    const ::std::string& name, ScrutinyStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ScrutinyStatus>(
    ScrutinyStatus_descriptor(), name, value);
}
// ===================================================================

class Scrutiny : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:roosha.Scrutiny) */ {
 public:
  Scrutiny();
  virtual ~Scrutiny();

  Scrutiny(const Scrutiny& from);

  inline Scrutiny& operator=(const Scrutiny& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scrutiny& default_instance();

  static inline const Scrutiny* internal_default_instance() {
    return reinterpret_cast<const Scrutiny*>(
               &_Scrutiny_default_instance_);
  }

  void Swap(Scrutiny* other);

  // implements Message ----------------------------------------------

  inline Scrutiny* New() const PROTOBUF_FINAL { return New(NULL); }

  Scrutiny* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Scrutiny& from);
  void MergeFrom(const Scrutiny& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Scrutiny* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cardId = 1;
  void clear_cardid();
  static const int kCardIdFieldNumber = 1;
  const ::std::string& cardid() const;
  void set_cardid(const ::std::string& value);
  #if LANG_CXX11
  void set_cardid(::std::string&& value);
  #endif
  void set_cardid(const char* value);
  void set_cardid(const char* value, size_t size);
  ::std::string* mutable_cardid();
  ::std::string* release_cardid();
  void set_allocated_cardid(::std::string* cardid);

  // string moment = 2;
  void clear_moment();
  static const int kMomentFieldNumber = 2;
  const ::std::string& moment() const;
  void set_moment(const ::std::string& value);
  #if LANG_CXX11
  void set_moment(::std::string&& value);
  #endif
  void set_moment(const char* value);
  void set_moment(const char* value, size_t size);
  ::std::string* mutable_moment();
  ::std::string* release_moment();
  void set_allocated_moment(::std::string* moment);

  // .roosha.ScrutinyInput inputMethod = 3;
  void clear_inputmethod();
  static const int kInputMethodFieldNumber = 3;
  ::roosha::ScrutinyInput inputmethod() const;
  void set_inputmethod(::roosha::ScrutinyInput value);

  // .roosha.ScrutinyView viewMethod = 4;
  void clear_viewmethod();
  static const int kViewMethodFieldNumber = 4;
  ::roosha::ScrutinyView viewmethod() const;
  void set_viewmethod(::roosha::ScrutinyView value);

  // .roosha.ScrutinyStatus status = 5;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  ::roosha::ScrutinyStatus status() const;
  void set_status(::roosha::ScrutinyStatus value);

  // @@protoc_insertion_point(class_scope:roosha.Scrutiny)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cardid_;
  ::google::protobuf::internal::ArenaStringPtr moment_;
  int inputmethod_;
  int viewmethod_;
  int status_;
  mutable int _cached_size_;
  friend struct  protobuf_learning_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Scrutiny

// string cardId = 1;
inline void Scrutiny::clear_cardid() {
  cardid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Scrutiny::cardid() const {
  // @@protoc_insertion_point(field_get:roosha.Scrutiny.cardId)
  return cardid_.GetNoArena();
}
inline void Scrutiny::set_cardid(const ::std::string& value) {
  
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roosha.Scrutiny.cardId)
}
#if LANG_CXX11
inline void Scrutiny::set_cardid(::std::string&& value) {
  
  cardid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:roosha.Scrutiny.cardId)
}
#endif
inline void Scrutiny::set_cardid(const char* value) {
  
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roosha.Scrutiny.cardId)
}
inline void Scrutiny::set_cardid(const char* value, size_t size) {
  
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roosha.Scrutiny.cardId)
}
inline ::std::string* Scrutiny::mutable_cardid() {
  
  // @@protoc_insertion_point(field_mutable:roosha.Scrutiny.cardId)
  return cardid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Scrutiny::release_cardid() {
  // @@protoc_insertion_point(field_release:roosha.Scrutiny.cardId)
  
  return cardid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Scrutiny::set_allocated_cardid(::std::string* cardid) {
  if (cardid != NULL) {
    
  } else {
    
  }
  cardid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cardid);
  // @@protoc_insertion_point(field_set_allocated:roosha.Scrutiny.cardId)
}

// string moment = 2;
inline void Scrutiny::clear_moment() {
  moment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Scrutiny::moment() const {
  // @@protoc_insertion_point(field_get:roosha.Scrutiny.moment)
  return moment_.GetNoArena();
}
inline void Scrutiny::set_moment(const ::std::string& value) {
  
  moment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roosha.Scrutiny.moment)
}
#if LANG_CXX11
inline void Scrutiny::set_moment(::std::string&& value) {
  
  moment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:roosha.Scrutiny.moment)
}
#endif
inline void Scrutiny::set_moment(const char* value) {
  
  moment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roosha.Scrutiny.moment)
}
inline void Scrutiny::set_moment(const char* value, size_t size) {
  
  moment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roosha.Scrutiny.moment)
}
inline ::std::string* Scrutiny::mutable_moment() {
  
  // @@protoc_insertion_point(field_mutable:roosha.Scrutiny.moment)
  return moment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Scrutiny::release_moment() {
  // @@protoc_insertion_point(field_release:roosha.Scrutiny.moment)
  
  return moment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Scrutiny::set_allocated_moment(::std::string* moment) {
  if (moment != NULL) {
    
  } else {
    
  }
  moment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moment);
  // @@protoc_insertion_point(field_set_allocated:roosha.Scrutiny.moment)
}

// .roosha.ScrutinyInput inputMethod = 3;
inline void Scrutiny::clear_inputmethod() {
  inputmethod_ = 0;
}
inline ::roosha::ScrutinyInput Scrutiny::inputmethod() const {
  // @@protoc_insertion_point(field_get:roosha.Scrutiny.inputMethod)
  return static_cast< ::roosha::ScrutinyInput >(inputmethod_);
}
inline void Scrutiny::set_inputmethod(::roosha::ScrutinyInput value) {
  
  inputmethod_ = value;
  // @@protoc_insertion_point(field_set:roosha.Scrutiny.inputMethod)
}

// .roosha.ScrutinyView viewMethod = 4;
inline void Scrutiny::clear_viewmethod() {
  viewmethod_ = 0;
}
inline ::roosha::ScrutinyView Scrutiny::viewmethod() const {
  // @@protoc_insertion_point(field_get:roosha.Scrutiny.viewMethod)
  return static_cast< ::roosha::ScrutinyView >(viewmethod_);
}
inline void Scrutiny::set_viewmethod(::roosha::ScrutinyView value) {
  
  viewmethod_ = value;
  // @@protoc_insertion_point(field_set:roosha.Scrutiny.viewMethod)
}

// .roosha.ScrutinyStatus status = 5;
inline void Scrutiny::clear_status() {
  status_ = 0;
}
inline ::roosha::ScrutinyStatus Scrutiny::status() const {
  // @@protoc_insertion_point(field_get:roosha.Scrutiny.status)
  return static_cast< ::roosha::ScrutinyStatus >(status_);
}
inline void Scrutiny::set_status(::roosha::ScrutinyStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:roosha.Scrutiny.status)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace roosha

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::roosha::ScrutinyView> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::roosha::ScrutinyView>() {
  return ::roosha::ScrutinyView_descriptor();
}
template <> struct is_proto_enum< ::roosha::ScrutinyInput> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::roosha::ScrutinyInput>() {
  return ::roosha::ScrutinyInput_descriptor();
}
template <> struct is_proto_enum< ::roosha::ScrutinyStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::roosha::ScrutinyStatus>() {
  return ::roosha::ScrutinyStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_learning_2eproto__INCLUDED
